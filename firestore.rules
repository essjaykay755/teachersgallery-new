rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Allow users to read and write their own data
    match /users/{userId} {
      allow create: if request.auth != null;
      allow read, update, delete: if request.auth != null && request.auth.uid == userId;
    }
    
    // Allow teachers to be read by anyone
    match /teachers/{teacherId} {
      allow read: if true;
      allow write: if request.auth != null && request.auth.uid == teacherId;
    }
    
    // Allow students to manage their own profiles
    match /students/{studentId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && request.auth.uid == studentId;
    }
    
    // Allow parents to manage their own profiles
    match /parents/{parentId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && request.auth.uid == parentId;
    }
    
    // Add rules for the profile collections
    match /teacherProfiles/{profileId} {
      allow read: if true; // Changed to allow anyone to read teacher profiles
      allow write: if request.auth != null && (
        request.resource.data.userId == request.auth.uid || 
        resource.data.userId == request.auth.uid
      );
    }
    
    match /studentProfiles/{profileId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && (
        request.resource.data.userId == request.auth.uid || 
        resource.data.userId == request.auth.uid
      );
    }
    
    match /parentProfiles/{profileId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && (
        request.resource.data.userId == request.auth.uid || 
        resource.data.userId == request.auth.uid
      );
    }
    
    // Allow users to read/write their own messages
    match /messages/{messageId} {
      allow read: if request.auth != null && (
        resource.data.senderId == request.auth.uid || 
        resource.data.recipientId == request.auth.uid
      );
      allow create: if request.auth != null && request.resource.data.senderId == request.auth.uid;
      allow update: if request.auth != null && (
        resource.data.senderId == request.auth.uid || 
        resource.data.recipientId == request.auth.uid
      );
    }
    
    // Allow conversation management - FIXED RULES
    match /conversations/{conversationId} {
      // Allow read access to conversations where user is a participant
      allow read: if request.auth != null && (
        // For existing conversations
        resource == null ||
        resource.data.participants == null ||
        request.auth.uid in resource.data.participants
      );
      
      // Allow creating conversations if the user is a participant
      allow create: if request.auth != null && 
                    request.resource.data.participants != null &&
                    request.auth.uid in request.resource.data.participants;
      
      // Allow updating conversations if the user is a participant
      allow update: if request.auth != null && 
                    request.resource.data.participants != null &&
                    request.auth.uid in request.resource.data.participants;
      
      // Allow participants to read and write messages in the conversation
      match /messages/{messageId} {
        // Allow reading messages if user is a participant in the parent conversation
        allow read: if request.auth != null && (
          // Allow reading if user is in the participants array
          (exists(/databases/$(database)/documents/conversations/$(conversationId)) &&
           get(/databases/$(database)/documents/conversations/$(conversationId)).data.participants is list &&
           request.auth.uid in get(/databases/$(database)/documents/conversations/$(conversationId)).data.participants)
        );
        
        // Allow creating messages if user is a participant and message senderId matches
        allow create: if request.auth != null && 
                      exists(/databases/$(database)/documents/conversations/$(conversationId)) &&
                      get(/databases/$(database)/documents/conversations/$(conversationId)).data.participants is list &&
                      request.auth.uid in get(/databases/$(database)/documents/conversations/$(conversationId)).data.participants && 
                      request.resource.data.senderId == request.auth.uid;
        
        // Allow updating messages if user is a participant and the sender
        allow update: if request.auth != null && 
                      exists(/databases/$(database)/documents/conversations/$(conversationId)) &&
                      get(/databases/$(database)/documents/conversations/$(conversationId)).data.participants is list &&
                      request.auth.uid in get(/databases/$(database)/documents/conversations/$(conversationId)).data.participants && 
                      resource.data.senderId == request.auth.uid;
      }
    }
    
    // Allow phone number request management
    match /phoneNumberRequests/{requestId} {
      allow read: if request.auth != null && (
        resource.data.requesterId == request.auth.uid || 
        resource.data.teacherId == request.auth.uid
      );
      allow create: if request.auth != null && request.resource.data.requesterId == request.auth.uid;
      allow update: if request.auth != null && (
        resource.data.teacherId == request.auth.uid ||
        resource.data.requesterId == request.auth.uid
      );
    }
    
    // Allow notifications management
    match /notifications/{notificationId} {
      allow read: if request.auth != null && resource.data.userId == request.auth.uid;
      allow create: if request.auth != null;
      allow update, delete: if request.auth != null && resource.data.userId == request.auth.uid;
    }
    
    // Properly secured reviews rules
    match /reviews/{reviewId} {
      // Anyone can read reviews
      allow read: if true;
      
      // Simplified rules for creating reviews - only check that user is authenticated and not reviewing themselves
      allow create: if request.auth != null &&
                   request.resource.data.reviewerId == request.auth.uid &&
                   request.resource.data.teacherId != request.auth.uid;
      
      // Allow users to edit their own reviews
      allow update: if request.auth != null &&
                   resource.data.reviewerId == request.auth.uid;
                   
      // Allow users to delete their own reviews
      allow delete: if request.auth != null &&
                   resource.data.reviewerId == request.auth.uid;
    }
    
    // User status for online presence
    match /userStatus/{userId} {
      allow read: if true; // Anyone can see online status
      allow write: if request.auth != null && request.auth.uid == userId; // Only the user can update their status
    }
  }
} 